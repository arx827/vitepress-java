import{_ as e,c as o,o as s,a}from"./app.b24c6e2d.js";const F=JSON.parse('{"title":"14. JpaRepository 的 Query","description":"","frontmatter":{"title":"14. JpaRepository 的 Query"},"headers":[{"level":2,"title":"JpaRepository 的 Query 方法","slug":"jparepository-的-query-方法","link":"#jparepository-的-query-方法","children":[]},{"level":2,"title":"JpaRepository 的 HQL 中參數的寫法","slug":"jparepository-的-hql-中參數的寫法","link":"#jparepository-的-hql-中參數的寫法","children":[]},{"level":2,"title":"JpaRepository 中寫原生 SQL 的寫法","slug":"jparepository-中寫原生-sql-的寫法","link":"#jparepository-中寫原生-sql-的寫法","children":[]},{"level":2,"title":"JpaRepository 中 @Query 須注意","slug":"jparepository-中-query-須注意","link":"#jparepository-中-query-須注意","children":[]},{"level":2,"title":"JpaRepository 中直接透過方法名稱查詢","slug":"jparepository-中直接透過方法名稱查詢","link":"#jparepository-中直接透過方法名稱查詢","children":[]}],"relativePath":"guide/sb_iSpan/chapter_14.md"}'),t={name:"guide/sb_iSpan/chapter_14.md"},n=a(`<h1 id="_14-jparepository-的-query" tabindex="-1">14. JpaRepository 的 Query <a class="header-anchor" href="#_14-jparepository-的-query" aria-hidden="true">#</a></h1><h2 id="jparepository-的-query-方法" tabindex="-1">JpaRepository 的 Query 方法 <a class="header-anchor" href="#jparepository-的-query-方法" aria-hidden="true">#</a></h2><ul><li>即 <code>HQL</code>，在 <code>SpringJpa</code> 內 <code>Hibernate</code> 交由 <code>Spring</code> 控管，因此使用的是 <code>JPA</code> 的 <code>API</code> 名稱： <code>JPQL (Java Persistence Query Language)</code>，用法與 <code>HQL (Hibernate Query Language)</code> 相同，是操作 <code>Entity</code> 內的屬性，而非 <code>Table</code> 中的欄位。</li><li><code>JpaRepository</code> 在寫 <code>HQL</code>，當需要參數時，有比較方便的編寫方式。</li></ul><h2 id="jparepository-的-hql-中參數的寫法" tabindex="-1">JpaRepository 的 HQL 中參數的寫法 <a class="header-anchor" href="#jparepository-的-hql-中參數的寫法" aria-hidden="true">#</a></h2><ul><li><ol><li>根據參數位置 (第幾個問號對應底下方法第幾個參數)</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Query</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">from customer where name = ?1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findCustomerByName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> Name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><ol start="2"><li>用 <code>:</code> 及 <code>@Raram</code> 做對應</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Query</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">from Customer where name = :name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Customer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findByName</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">Param</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="jparepository-中寫原生-sql-的寫法" tabindex="-1">JpaRepository 中寫原生 SQL 的寫法 <a class="header-anchor" href="#jparepository-中寫原生-sql-的寫法" aria-hidden="true">#</a></h2><p>若要使用原生 <code>SQL</code> 做查詢，須在後面加上 <code>nativeQuery = true</code>。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Query</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SELECT * FROM Customer WHERE name = :name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nativeQuery</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Customer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findByName2</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">Param</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>用 <code>原生 SQL 查詢</code> <code>(nativeQuery = true)</code> 就不是對 <code>Entity</code> 操作了，會變為對 <code>Table</code> 操作，因此操作的屬性就變為 <code>table</code> 裡的屬性。</p></blockquote><h2 id="jparepository-中-query-須注意" tabindex="-1">JpaRepository 中 @Query 須注意 <a class="header-anchor" href="#jparepository-中-query-須注意" aria-hidden="true">#</a></h2><p>用 <code>@Query</code> 做查詢時，若是需要 修改資料 或 刪除資料 的情況，須在 <code>@Query</code> 上方加入 <code>@Modifying</code> 標註，如：</p><ul><li>預設為 <code>@Transational(ReadOnly = true)</code></li><li>故需要加 <code>@Transational</code> 覆蓋原預設設定</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Modifying</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Query</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">delete from customer where id = ?1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nativeQuery</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">delAccount</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="jparepository-中直接透過方法名稱查詢" tabindex="-1">JpaRepository 中直接透過方法名稱查詢 <a class="header-anchor" href="#jparepository-中直接透過方法名稱查詢" aria-hidden="true">#</a></h2><p><code>Spring</code> 提供了一套可以透過命名規則進行查詢。這套機制會把方法過濾一些關鍵字，比如： <code>find...By</code>, <code>read...By</code>, <code>query...By</code>, <code>count...By</code> 和 <code>get... By</code>。</p><ul><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" target="_blank" rel="noreferrer">官方參考文件 (搜尋 <code>Keyword Sample JPQL snippet</code>)</a></li></ul><table><thead><tr><th>Keyword</th><th>Sample</th><th>JPQL snippet</th></tr></thead><tbody><tr><td><code>Distinct</code></td><td><code>findDistinctByLastnameAndFirstname</code></td><td><code>select distinct …​ where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td><code>And</code></td><td><code>findByLastnameAndFirstname</code></td><td>… <code>where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td><code>Or</code></td><td><code>findByLastnameOrFirstname</code></td><td>… <code>where x.lastname = ?1 or x.firstname = ?2</code></td></tr><tr><td><code>Is</code>, <code>Equals</code></td><td><code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td><td>… <code>where x.firstname = ?1</code></td></tr><tr><td><code>Between</code></td><td><code>findByStartDateBetween</code></td><td>… <code>where x.startDate between ?1 and ?2</code></td></tr><tr><td><code>LessThan</code></td><td><code>findByAgeLessThan</code></td><td>… <code>where x.age &lt; ?1</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByAgeLessThanEqual</code></td><td>… <code>where x.age &lt;= ?1</code></td></tr><tr><td><code>GreaterThan</code></td><td><code>findByAgeGreaterThan</code></td><td>… <code>where x.age &gt; ?1</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByAgeGreaterThanEqual</code></td><td>… <code>where x.age &gt;= ?1</code></td></tr><tr><td><code>After</code></td><td><code>findByStartDateAfter</code></td><td>… <code>where x.startDate &gt; ?1</code></td></tr><tr><td><code>Before</code></td><td><code>findByStartDateBefore</code></td><td>… <code>where x.startDate &lt; ?1</code></td></tr><tr><td><code>IsNull</code>, <code>Null</code></td><td><code>findByAge(Is)Null</code></td><td>… <code>where x.age is null</code></td></tr><tr><td><code>IsNotNull</code>, <code>NotNull</code></td><td><code>findByAge(Is)NotNull</code></td><td>… <code>where x.age not null</code></td></tr><tr><td><code>Like</code></td><td><code>findByFirstnameLike</code></td><td>… <code>where x.firstname like ?1</code></td></tr><tr><td><code>NotLike</code></td><td><code>findByFirstnameNotLike</code></td><td>… <code>where x.firstname not like ?1</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByFirstnameStartingWith</code></td><td>… <code>where x.firstname like ?1 (parameter bound with appended %)</code></td></tr><tr><td><code>EndingWith</code></td><td><code>findByFirstnameEndingWith</code></td><td>… <code>where x.firstname like ?1 (parameter bound with prepended %)</code></td></tr><tr><td><code>Containing</code></td><td><code>findByFirstnameContaining</code></td><td>… <code>where x.firstname like ?1 (parameter bound wrapped in %)</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByAgeOrderByLastnameDesc</code></td><td>… <code>where x.age = ?1 order by x.lastname desc</code></td></tr><tr><td><code>Not</code></td><td><code>findByLastnameNot</code></td><td>… <code>where x.lastname &lt;&gt; ?1</code></td></tr><tr><td><code>In</code></td><td><code>findByAgeIn(Collection&lt;Age&gt; ages) </code></td><td>… <code>where x.age in ?1</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByAgeNotIn(Collection&lt;Age&gt; ages) </code></td><td>… <code>where x.age not in ?1</code></td></tr><tr><td><code>True</code></td><td><code>findByActiveTrue()</code></td><td>… <code>where x.active = true</code></td></tr><tr><td><code>False</code></td><td><code>findByActiveFalse() </code></td><td>… <code>where x.active = false</code></td></tr><tr><td><code>IgnoreCase</code></td><td><code>findByFirstnameIgnoreCase </code></td><td>… <code>where UPPER(x.firstname) = UPPER(?1)</code></td></tr></tbody></table>`,17),d=[n];function r(l,c,p,i,y,u){return s(),o("div",null,d)}const h=e(t,[["render",r]]);export{F as __pageData,h as default};
