import{_ as e,c as o,o as l,a}from"./app.b24c6e2d.js";const D=JSON.parse('{"title":"12. Spring JPA 實作與應用","description":"","frontmatter":{"title":"12. Spring JPA 實作與應用"},"headers":[{"level":2,"title":"SpringData JPA","slug":"springdata-jpa","link":"#springdata-jpa","children":[]},{"level":2,"title":"SpringData JPA 與 Spring Boot 的整合","slug":"springdata-jpa-與-spring-boot-的整合","link":"#springdata-jpa-與-spring-boot-的整合","children":[]},{"level":2,"title":"JpaRepository 的用法","slug":"jparepository-的用法","link":"#jparepository-的用法","children":[]},{"level":2,"title":"寫一些 Controller 來測試 JpaRepository 的功能","slug":"寫一些-controller-來測試-jparepository-的功能","link":"#寫一些-controller-來測試-jparepository-的功能","children":[]},{"level":2,"title":"CrudRepository<T, ID> 提供的方法","slug":"crudrepository-t-id-提供的方法","link":"#crudrepository-t-id-提供的方法","children":[]}],"relativePath":"guide/sb_iSpan/chapter_12.md"}'),s={name:"guide/sb_iSpan/chapter_12.md"},p=a(`<h1 id="_12-spring-jpa-實作與應用" tabindex="-1">12. Spring JPA 實作與應用 <a class="header-anchor" href="#_12-spring-jpa-實作與應用" aria-hidden="true">#</a></h1><h2 id="springdata-jpa" tabindex="-1">SpringData JPA <a class="header-anchor" href="#springdata-jpa" aria-hidden="true">#</a></h2><ul><li><code>JPA (Java Persistence API)</code> 是 <code>SUN</code> 針對 <code>ORM</code> 技術提出的規範，目的為簡化持久化的開發工作以及整合各家 <code>ORM</code> 技術。</li><li><code>Spring Data JPA</code> 是 <code>Spring</code> 根據 <code>ORM 框架</code> 和 <code>JPA 規範</code> 而封裝的 <code>JPA 應用框架</code>，目的是降低存取資料層的工作量，讓開發人員只需寫出 <code>JpaRepository</code> 的介面，而 <code>Spring</code> 自動實作其功能，達到快速開發的效果。</li></ul><h2 id="springdata-jpa-與-spring-boot-的整合" tabindex="-1">SpringData JPA 與 Spring Boot 的整合 <a class="header-anchor" href="#springdata-jpa-與-spring-boot-的整合" aria-hidden="true">#</a></h2><ul><li>開發者可以使用 <code>Spring Boot</code> 與 <code>SpringData JPA</code> 整合好的套件，直接開發，該套件的名稱為 <code>spring-boot-start-data-jpa</code>。</li><li>直接在 <code>Maven</code> 的 <code>pom.xml</code> 加入該套件，就可以使用 <code>SpringData JPA</code>。</li></ul><h2 id="jparepository-的用法" tabindex="-1">JpaRepository 的用法 <a class="header-anchor" href="#jparepository-的用法" aria-hidden="true">#</a></h2><ul><li>先看一下 <code>JpaRepository</code> 的介面定義<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JpaRepository</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ID</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PagingAndSortingRepository</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ID</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryByExampleExecutor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>再看 <code>PagingAndSortingRepository</code> 的介面定義<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PagingAndSortingRepository</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ID</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CrudRepository</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ID</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>可以看出 <code>JpaRepository</code> 繼承了介面 <code>PagingAndSortingRepository</code> 和 <code>QueryByExampleExecutor</code>。 而 <code>PagingAndSortingRepository</code> 又繼承了 <code>CrudRepository</code>。 因此，<code>JpaRepository</code> 介面同時擁有基本 <code>DRUD</code> 功能，以及分頁功能。 <code>QueryByExampleExecutor&lt;T&gt;</code> 則提供根據 <code>Entity</code> 查詢的功能 (其實就是 <code>HQL</code>)。</li></ul><h2 id="寫一些-controller-來測試-jparepository-的功能" tabindex="-1">寫一些 <code>Controller</code> 來測試 <code>JpaRepository</code> 的功能 <a class="header-anchor" href="#寫一些-controller-來測試-jparepository-的功能" aria-hidden="true">#</a></h2><ul><li><p>先下載測試 <code>API</code> 工具 <code>PostMan</code>。</p></li><li><p>為測試 <code>JapRepository</code> 的功能，所以先不寫 <code>Service</code> 層，記得正式開發時要補上 <code>Service</code>。</p></li><li><p>首先先準備一個 <code>Entity</code> 類別 <code>Customer</code>，裡面有 <code>id</code>、<code>name</code>、<code>level</code> 三個屬性。</p></li><li><p>寫一個介面 <code>CustomerRepository</code> 實作 <code>JpaRepository&lt;Customer, Long&gt;</code>。</p></li><li><p>寫一個 <code>CustomerController</code> 測試這個介面 (搭配 <code>@ResponseBody</code> 輸出 <code>JSON</code> 格式的資料)。</p></li></ul><h2 id="crudrepository-t-id-提供的方法" tabindex="-1">CrudRepository&lt;T, ID&gt; 提供的方法 <a class="header-anchor" href="#crudrepository-t-id-提供的方法" aria-hidden="true">#</a></h2><p>觀察一下 <code>CrudRepository</code> 有哪些內建的方法：</p><ul><li><code>&lt;S extends T&gt; S save (S entity);</code></li></ul><p>說明：可以回傳 <code>T</code> 型別，或是被 <code>T</code> 繼承的子類別。</p><ul><li><p><code>&lt;S extends T&gt; lterable&lt;S&gt; saveAll(lterable&lt;S&gt;entities);</code></p></li><li><p><code>Optional&lt;T&gt; findById(ID id);</code> =&gt; <code>get()</code>、<code>isPresent()</code></p></li><li><p><code>boolean existsById(ID id);</code></p></li><li><p><code>Iterable&lt;T&gt; findAll();</code></p></li><li><p><code>Iterable&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids);</code></p></li><li><p><code>long count();</code></p></li><li><p><code>void deleteById(ID id);</code></p></li><li><p><code>void delete(T entity);</code></p></li><li><p><code>void deleteAllById(Iterable&lt;? extends ID&gt; ids);</code></p></li><li><p><code>void deleteAll(Iterable&lt;? extends T&gt; entities);</code></p></li><li><p><code>void deleteAll();</code></p></li></ul><p>測試上述方法：</p><ul><li><p>儲存一個 <code>Entity</code> (實體類別)</p><p><code>&lt;S extends T&gt; S save(S entity);</code></p></li><li><p>儲存多個可迭代的實體類別</p><p><code>&lt;S extends T&gt; Iterable&lt;S&gt; saveAll(Iterable&lt;S&gt; entities);</code></p></li><li><p>透過 <code>id</code> 找到 <code>Optional</code> 物件</p><p><code>Optional&lt;T&gt; findById(ID id);</code></p></li><li><p><code>Optional</code> 說明：</p><p>可能包含，也可能不包含的值，通常拿來代替 <code>null</code>，因為有時 <code>null</code> 的語意較含糊不清，而導致系統報錯時，有多種可能，造成 <code>debug</code> 困難。</p><p><code>Optional</code> 物件的 <code>isPresent()</code> 方法，可以判斷是否有拿到物件。</p><p><code>Optional</code> 物件的 <code>get()</code> 方法可以拿到該物件。</p></li><li><p>找到本 <code>Entity</code> 全部的資料</p><p><code>Iterable&lt;T&gt; findAll();</code></p></li><li><p>透過 <code>ID</code> 刪除某資料</p><p><code>void deleteById(ID, id);</code></p></li><li><p>透過 <code>Entity</code> 刪除某資料</p><p><code>void delete(T entity);</code></p></li></ul>`,16),t=[p];function d(c,n,i,r,y,g){return l(),o("div",null,t)}const u=e(s,[["render",d]]);export{D as __pageData,u as default};
