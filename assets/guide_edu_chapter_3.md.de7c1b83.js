import{_ as t,c as e,o as d,a}from"./app.b24c6e2d.js";const b=JSON.parse('{"title":"3. 基本資料型別 (Primitive Data Types)","description":"","frontmatter":{"title":"3. 基本資料型別 (Primitive Data Types)"},"headers":[{"level":2,"title":"基本資料型別 - 整數","slug":"基本資料型別-整數","link":"#基本資料型別-整數","children":[]},{"level":2,"title":"變數宣告","slug":"變數宣告","link":"#變數宣告","children":[]},{"level":2,"title":"變數命名規則","slug":"變數命名規則","link":"#變數命名規則","children":[]},{"level":2,"title":"基本型別宣告","slug":"基本型別宣告","link":"#基本型別宣告","children":[]},{"level":2,"title":"byte 怎麼計算？ 1 byte = 8 bit","slug":"byte-怎麼計算-1-byte-8-bit","link":"#byte-怎麼計算-1-byte-8-bit","children":[]},{"level":2,"title":"相加","slug":"相加","link":"#相加","children":[]},{"level":2,"title":"資料溢位 (Overflow)","slug":"資料溢位-overflow","link":"#資料溢位-overflow","children":[]},{"level":2,"title":"基本資料型別 - 浮點數","slug":"基本資料型別-浮點數","link":"#基本資料型別-浮點數","children":[]},{"level":2,"title":"基本資料型別 - char boolean","slug":"基本資料型別-char-boolean","link":"#基本資料型別-char-boolean","children":[]},{"level":2,"title":"基本型別宣告","slug":"基本型別宣告-1","link":"#基本型別宣告-1","children":[]},{"level":2,"title":"跳脫字元","slug":"跳脫字元","link":"#跳脫字元","children":[]},{"level":2,"title":"保留字","slug":"保留字","link":"#保留字","children":[]},{"level":2,"title":"區域變數 (Local Variable)","slug":"區域變數-local-variable","link":"#區域變數-local-variable","children":[]},{"level":2,"title":"運算子 (Operators)","slug":"運算子-operators","link":"#運算子-operators","children":[]},{"level":2,"title":"算術運算子","slug":"算術運算子","link":"#算術運算子","children":[]},{"level":2,"title":"二元數字運算晉升 (Binary Numeric Promotion)","slug":"二元數字運算晉升-binary-numeric-promotion","link":"#二元數字運算晉升-binary-numeric-promotion","children":[]},{"level":2,"title":"晉升 (Promotion) 與 型別轉換 (Casting)","slug":"晉升-promotion-與-型別轉換-casting","link":"#晉升-promotion-與-型別轉換-casting","children":[]},{"level":2,"title":"比較運算子 (Comparison Operators)","slug":"比較運算子-comparison-operators","link":"#比較運算子-comparison-operators","children":[]},{"level":2,"title":"條件運算 (Conditional Operators)","slug":"條件運算-conditional-operators","link":"#條件運算-conditional-operators","children":[]},{"level":2,"title":"真假值","slug":"真假值","link":"#真假值","children":[]},{"level":2,"title":"位元運算子 (Bitwise Operators)","slug":"位元運算子-bitwise-operators","link":"#位元運算子-bitwise-operators","children":[]},{"level":2,"title":"遞增、遞減運算","slug":"遞增、遞減運算","link":"#遞增、遞減運算","children":[]},{"level":2,"title":"指定運算 (Assignment Operators)","slug":"指定運算-assignment-operators","link":"#指定運算-assignment-operators","children":[]},{"level":2,"title":"三元運算 ?: (Conditional Operator)","slug":"三元運算-conditional-operator","link":"#三元運算-conditional-operator","children":[]},{"level":2,"title":"運算優先順序 (Operator Precedence)","slug":"運算優先順序-operator-precedence","link":"#運算優先順序-operator-precedence","children":[]}],"relativePath":"guide/edu/chapter_3.md"}'),l={name:"guide/edu/chapter_3.md"},o=a(`<h1 id="_3-基本資料型別-primitive-data-types" tabindex="-1">3. 基本資料型別 (Primitive Data Types) <a class="header-anchor" href="#_3-基本資料型別-primitive-data-types" aria-hidden="true">#</a></h1><h2 id="基本資料型別-整數" tabindex="-1">基本資料型別 - 整數 <a class="header-anchor" href="#基本資料型別-整數" aria-hidden="true">#</a></h2><table><thead><tr><th>名稱</th><th style="text-align:center;">Byte</th><th style="text-align:right;">範圍</th><th style="text-align:center;">初值</th><th style="text-align:right;">說明</th></tr></thead><tbody><tr><td>byte</td><td style="text-align:center;">1</td><td style="text-align:right;">-2⁷ ~ ( 2⁷ - 1 )</td><td style="text-align:center;">0</td><td style="text-align:right;">-128 ~ 127</td></tr><tr><td>short</td><td style="text-align:center;">2</td><td style="text-align:right;">-2¹⁵ ~ ( 2¹⁵ - 1 )</td><td style="text-align:center;">0</td><td style="text-align:right;">-32768 ~ 32767</td></tr><tr><td>int</td><td style="text-align:center;">4</td><td style="text-align:right;">-2³¹ ~ ( 2³¹ - 1 )</td><td style="text-align:center;">0</td><td style="text-align:right;">-21億 ~ 21億</td></tr><tr><td>long</td><td style="text-align:center;">8</td><td style="text-align:right;">-2⁶³ ~ ( 2⁶³ - 1 )</td><td style="text-align:center;">0L</td><td style="text-align:right;">-9.2 x 10¹⁸ ~ 9.2 x 10¹⁸</td></tr></tbody></table><blockquote><p>[註] 1 byte = 8 bit</p></blockquote><h2 id="變數宣告" tabindex="-1">變數宣告 <a class="header-anchor" href="#變數宣告" aria-hidden="true">#</a></h2><ul><li>變數宣告方式： <ul><li><p>方法一：宣告型態</p><ul><li><code>資料型態 &lt;空格&gt; 變數名稱</code><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> salary</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><p>方法二：直接宣告</p><ul><li><code>資料型態 &lt;空格&gt; 變數名稱 = 值</code><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul></li><li>同一型態資料可連續宣告，中間用逗號區隔，分號結尾<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>變數都必須給值後才能使用，而且相同變數名稱不能重覆宣告。實體變數為例外，宣告後如不給值會有預設值，請見 class 章節。</li></ul><h2 id="變數命名規則" tabindex="-1">變數命名規則 <a class="header-anchor" href="#變數命名規則" aria-hidden="true">#</a></h2><ul><li>變數名稱：<code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>_底線</code>, <code>$</code>，長度不拘 <ul><li>第一個不能是 <code>數字</code></li><li><code>大小寫</code> 不同，為不同的變數</li><li>不能是 <code>關鍵字</code></li></ul></li><li>[很重要] 變數、方法命名規則 <ul><li>小寫開頭</li><li>如果後面還有接其他的字，則後字以大寫開頭</li><li>變數命名要「 <code>簡短</code> 」，且要有意義，這種命名方式英文叫做「 <code>Camel Case</code> 」，因為像駝峰。例如： <code>int fruitAmount = 10;</code></li></ul></li><li>例外：<code>常數變數 (Constant)</code>，通常為全部大寫</li><li>可參考 <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" target="_blank" rel="noreferrer">oracle 官網</a></li></ul><h2 id="基本型別宣告" tabindex="-1">基本型別宣告 <a class="header-anchor" href="#基本型別宣告" aria-hidden="true">#</a></h2><table><thead><tr><th>基本型別</th><th>範例及說明</th></tr></thead><tbody><tr><td>byte</td><td><code>byte a = 1</code></td></tr><tr><td>int</td><td><code>int a = 1</code></td></tr><tr><td>long</td><td><code>long a = 12345678901L;</code> <br> 在 Java 開發時，如果輸入整數預設為 <code>int</code> 型態，最多只能輸入到 <code>21 億</code>，要輸入超過 <code>21 億</code>，必須加 <code>L</code> 於字尾，表示為 <code>long</code> 型態</td></tr></tbody></table><h2 id="byte-怎麼計算-1-byte-8-bit" tabindex="-1">byte 怎麼計算？ 1 byte = 8 bit <a class="header-anchor" href="#byte-怎麼計算-1-byte-8-bit" aria-hidden="true">#</a></h2><p>電腦記憶體中存放的都是 <code>二進位</code> 資料，也就是只有 0、1。</p><p>下方每一格表示 1 個 <code>bit</code>，一列有 <code>8 bit</code> 為 1 個 <code>byte</code>，最左邊的 <code>bit (2⁷)</code> 表示正負號</p><p>以下有 6 個範例</p><table><thead><tr><th style="text-align:right;">2⁷</th><th style="text-align:right;">2⁶</th><th style="text-align:right;">2⁵</th><th style="text-align:right;">2⁴</th><th style="text-align:right;">2³</th><th style="text-align:right;">2²</th><th style="text-align:right;">2¹</th><th style="text-align:right;">2⁰</th><th style="text-align:right;">計算</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">2⁰ = 1</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">2¹ = 2</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">2¹ + 2⁰ = 3</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">2² = 4</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">2⁶ + 2⁵ + ... + 2¹ + 2⁰ = 127</td></tr></tbody></table><h2 id="相加" tabindex="-1">相加 <a class="header-anchor" href="#相加" aria-hidden="true">#</a></h2><p>直接 bit 相加，超過 1，則進位</p><table><thead><tr><th style="text-align:right;">2⁷</th><th style="text-align:right;">2⁶</th><th style="text-align:right;">2⁵</th><th style="text-align:right;">2⁴</th><th style="text-align:right;">2³</th><th style="text-align:right;">2²</th><th style="text-align:right;">2¹</th><th style="text-align:right;">2⁰</th><th style="text-align:right;">計算</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">20</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">+20</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">2⁵ + 2³ = 40</td></tr><tr><td style="text-align:right;"></td><td style="text-align:right;"></td><td style="text-align:right;"></td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;"></td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;"></td><td style="text-align:right;"></td><td style="text-align:right;"></td></tr></tbody></table><h2 id="資料溢位-overflow" tabindex="-1">資料溢位 (Overflow) <a class="header-anchor" href="#資料溢位-overflow" aria-hidden="true">#</a></h2><p>計算結果超過能儲存的範圍，稱為 <code>溢位 (Overflow)</code>，計算結果會不正確</p><table><thead><tr><th style="text-align:right;">2⁷</th><th style="text-align:right;">2⁶</th><th style="text-align:right;">2⁵</th><th style="text-align:right;">2⁴</th><th style="text-align:right;">2³</th><th style="text-align:right;">2²</th><th style="text-align:right;">2¹</th><th style="text-align:right;">2⁰</th><th style="text-align:right;">計算</th></tr></thead><tbody><tr><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">1</td><td style="text-align:right;">127</td></tr><tr><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">1</td><td style="text-align:right;">+ 1</td></tr><tr><td style="text-align:right;">1</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">0</td><td style="text-align:right;">- 128</td></tr><tr><td style="text-align:right;"></td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;">1 + 1<br>進位</td><td style="text-align:right;"></td></tr></tbody></table><h2 id="基本資料型別-浮點數" tabindex="-1">基本資料型別 - 浮點數 <a class="header-anchor" href="#基本資料型別-浮點數" aria-hidden="true">#</a></h2><p>(算錢不要用)</p><table><thead><tr><th>名稱</th><th>Byte</th><th>範圍</th><th>初值</th><th>說明</th><th>宣告</th></tr></thead><tbody><tr><td><code>float</code></td><td>4</td><td>±3.4x10³⁸ ~ ±1.4x10⁻⁴⁵</td><td>0.0f</td><td>單精度浮點數，精度 <code>7</code> 位數</td><td><code>float a = 0.1f;</code> <br>(因為預設為 double，所以要加 f，指明為 float)</td></tr><tr><td><code>double</code></td><td>8</td><td>±1.8x10³⁰⁸ ~ ±4.9x10⁻³²⁴</td><td>0.0</td><td>雙精度浮點數 <code>15</code> 位數，Java 預設浮點數都是 double</td><td><code>double a = 0.1;</code> <br>(小數預設型別都是 double)</td></tr></tbody></table><ul><li><code>33.33 * 4.5 = 149.98499999999999</code></li><li><code>3333 * 45 = 149985</code></li><li>計算小數時，會有誤差。所有的程式語言都是如此。</li><li>浮點數計算不精確，但計算速度快，<code>Java</code> 另有別的機制 (<code>BigDecimal 類別</code>)，可以正確處理浮點數計算，但速度較慢。</li></ul><h2 id="基本資料型別-char-boolean" tabindex="-1">基本資料型別 - char boolean <a class="header-anchor" href="#基本資料型別-char-boolean" aria-hidden="true">#</a></h2><table><thead><tr><th>名稱</th><th>大小</th><th>範圍</th><th>初值</th><th>說明</th><th>宣告</th></tr></thead><tbody><tr><td>char</td><td>2 bytes</td><td>0 ~ 2¹⁶-1<br>0~65535<br>\\u0000-\\uffff</td><td>\\u0000</td><td>Unicode standard 6.0<br>UTF-16<br>一般字 2 bytes<br>罕見字 4 bytes</td><td><code>char a = &#39;A&#39;;</code> (單引號)</td></tr><tr><td>boolean</td><td>1 bit</td><td>true, false</td><td>false</td><td></td><td><code>boolean paid = true;</code></td></tr></tbody></table><blockquote><ul><li>多個字 用 <code>&quot;</code></li><li>單個字 用 <code>&#39;</code></li></ul></blockquote><h2 id="基本型別宣告-1" tabindex="-1">基本型別宣告 <a class="header-anchor" href="#基本型別宣告-1" aria-hidden="true">#</a></h2><table><thead><tr><th>型別</th><th>範例</th></tr></thead><tbody><tr><td>char</td><td><code>char a = &#39;A&#39;; </code></td></tr><tr><td>boolean</td><td><code>boolean a = true</code></td></tr></tbody></table><h2 id="跳脫字元" tabindex="-1">跳脫字元 <a class="header-anchor" href="#跳脫字元" aria-hidden="true">#</a></h2><p>在文字中如果要使用特定字元，例如 <code>&#39;</code> 或者 <code>&quot;</code>，必須使用跳脫符號 <code>\\</code>，讓編譯器知道後面的字為要顯示的字，常用的跳脫字元如下</p><table><thead><tr><th>範例</th><th>範例</th></tr></thead><tbody><tr><td><code>\\t</code> (一個 tab 鍵)</td><td><code>\\\\</code> (反斜線)</td></tr><tr><td><code>\\&quot;</code> (雙引號)</td><td><code>\\uxxxx</code> (以 16 進位輸出 Unicode)</td></tr><tr><td><code>\\&#39;</code> (單引號)</td><td><code>\\n</code> (Linux、Mac 換行)</td></tr><tr><td><code>\\r\\n</code> (windows 系統換行字元)</td><td><code>\\r</code> (游標移至行手)</td></tr></tbody></table><h2 id="保留字" tabindex="-1">保留字 <a class="header-anchor" href="#保留字" aria-hidden="true">#</a></h2><table><thead><tr><th>abstract</th><th>continue</th><th>for</th><th>new</th><th>switch</th></tr></thead><tbody><tr><td>assert</td><td>default</td><td>goto</td><td>package</td><td>synchronized</td></tr><tr><td>boolean</td><td>do</td><td>if</td><td>private</td><td>this</td></tr><tr><td>break</td><td>double</td><td>implements</td><td>protected</td><td>throw</td></tr><tr><td>byte</td><td>else</td><td>import</td><td>public</td><td>throws</td></tr><tr><td>case</td><td>enum</td><td>instanceof</td><td>return</td><td>transient</td></tr><tr><td>catch</td><td>extends</td><td>int</td><td>short</td><td>try</td></tr><tr><td>char</td><td>final</td><td>interface</td><td>static</td><td>void</td></tr><tr><td>class</td><td>finally</td><td>long</td><td>strictfp</td><td>volatile</td></tr><tr><td>const</td><td>float</td><td>native</td><td>super</td><td>while</td></tr></tbody></table><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank" rel="noreferrer">官網-保留字</a></li></ul><h2 id="區域變數-local-variable" tabindex="-1">區域變數 (Local Variable) <a class="header-anchor" href="#區域變數-local-variable" aria-hidden="true">#</a></h2><ul><li>宣告在方法內的變數，稱為「 <code>區域變數</code> 」，只能在宣告的方法左右括號內被使用。</li><li>Java 程式運算有兩大記憶體區塊，一塊叫 <code>Stack</code>，另一塊叫 <code>Heap</code>，用來存放物件。</li><li>因為「 <code>區域變數</code> 」存放在「 <code>Stack</code> 」中。又稱為 <code>stack variable</code>，方法一結束，該變數即從記憶體中消失，所以也叫 <code>自動變數 (Automatic variables)</code>。</li><li>區域變數在宣告時並不會自動設定預設值，必須用<code>等於 (=)</code>設定值後，才能使用，否則編譯會有錯。</li></ul><blockquote><p>在宣告的前面找最近的大括號，再找相對應的大括號。</p></blockquote><h2 id="運算子-operators" tabindex="-1">運算子 (Operators) <a class="header-anchor" href="#運算子-operators" aria-hidden="true">#</a></h2><table><thead><tr><th>算術運算</th><th><code>+ (加)</code>、<code>- (減)</code>、<code>* (乘)</code>、<code>/ (除)</code></th></tr></thead><tbody><tr><td>比較運算</td><td><code>&gt; (大於)</code>、<code>&gt;= (不小於)</code>、<code>&lt; (小於)</code>、<br><code>&lt;= (不大於)</code>、<code>== (等於)</code>、<code>!= (不等於)</code></td></tr><tr><td>條件運算</td><td><code>&amp;&amp; (and)</code>、\`</td></tr><tr><td>位元運算</td><td><code>&amp; (and)</code>、\`</td></tr><tr><td>遞增、遞減運算</td><td><code>++</code>、<code>--</code></td></tr><tr><td>指定運算</td><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>三元運算</td><td><code>?:</code></td></tr></tbody></table><h2 id="算術運算子" tabindex="-1">算術運算子 <a class="header-anchor" href="#算術運算子" aria-hidden="true">#</a></h2><ul><li>又稱為二元運算子 (Binary operators)</li></ul><table><thead><tr><th></th><th><code>int a = 10, b = 3;</code></th><th>結果</th></tr></thead><tbody><tr><td>+</td><td><code>c = a + b</code></td><td><code>c = 13</code></td></tr><tr><td>-</td><td><code>c = a - b</code></td><td><code>c = 7</code></td></tr><tr><td>*</td><td><code>c = a * b</code></td><td><code>c = 30</code></td></tr><tr><td>/</td><td><code>c = a / b</code></td><td><code>c = 3.333?</code></td></tr><tr><td>% (取餘數)</td><td><code>c = a % b</code></td><td><code>c = 1</code><br>常用來判斷是否整除及奇偶數</td></tr></tbody></table><blockquote><ul><li>若兩相同型別的運算元運算時，則運算結果也會為同一型別，至少為 int 型別。</li></ul></blockquote><h2 id="二元數字運算晉升-binary-numeric-promotion" tabindex="-1">二元數字運算晉升 (Binary Numeric Promotion) <a class="header-anchor" href="#二元數字運算晉升-binary-numeric-promotion" aria-hidden="true">#</a></h2><ul><li><p>Java Language Spec 5.6.2 中說明，以下條件先成立則先執行</p><ul><li>If either operand is of type <code>double</code>, the other is converted to <code>double</code>. <ul><li>如果運算元有一個為 <code>double</code>，則另一個運算元會轉為 <code>double</code> 才進行運算，其結果也為 <code>double</code>。</li></ul></li><li>Otherwise, if either operand is of type <code>float</code>, the other is converted to <code>float</code>.</li><li>Otherwise, if either operand is of type <code>long</code>, the other is converted to <code>long</code>.</li><li>Otherwise, both operands are converted to type <code>int</code>.</li></ul></li><li><p>簡而言之，以能儲存的 range 最大的為主，<code>Double &gt; Float &gt; Long &gt; Int</code>，「 但至少為 <code>int</code> 」，主要是避免「 資料溢位 」</p></li><li><p>例如</p><ul><li><code>int a = 10</code></li><li><code>double b = 15.2</code></li><li><code>double c = a + b;</code> 因為 a 為 <code>int</code>，b 為 <code>double</code>，計算時會自動把 a 晉升為 <code>double</code> 進行計算以防止溢位，所以 c 必須宣告為 <code>double</code>。</li></ul><table><thead><tr><th>等號邊第一運算元</th><th>等號右邊第二運算元</th><th>等號左邊變數宣告</th></tr></thead><tbody><tr><td>int</td><td>int</td><td>int</td></tr><tr><td>int</td><td>double</td><td>double</td></tr><tr><td>float</td><td>double</td><td>double</td></tr><tr><td>byte</td><td>short</td><td>int</td></tr></tbody></table></li></ul><h2 id="晉升-promotion-與-型別轉換-casting" tabindex="-1">晉升 (Promotion) 與 型別轉換 (Casting) <a class="header-anchor" href="#晉升-promotion-與-型別轉換-casting" aria-hidden="true">#</a></h2><ul><li>Promotion 為等號右邊的資料型別，較左方的型別小，則會將右方自動變成較大的資料型別。 <ul><li><code>double a = 1;</code></li></ul></li><li>型別轉換 (Typecasting) <ul><li>較大的資料型別轉為較小的資料型別時，必須使用強制轉換。</li><li>利用「 小括號 」進行強制轉換 <ul><li><code>double a = 10.5;</code></li><li><code>int y = (int)a;</code><blockquote><p>強制轉型成 int 後，小數會不見，y = 10</p></blockquote></li></ul></li></ul></li></ul><h2 id="比較運算子-comparison-operators" tabindex="-1">比較運算子 (Comparison Operators) <a class="header-anchor" href="#比較運算子-comparison-operators" aria-hidden="true">#</a></h2><ul><li><code>Java</code> 提供了以下的比較運算子，其回傳值為 <code>boolean (true or false)</code><ul><li><code>&gt; (大於)</code>、<code>&gt;= (不小於)</code>、<code>&lt; (小於)</code></li><li><code>&lt;= (不大於)</code>、<code>== (等於)</code>、<code>!= (不等於)</code></li></ul></li></ul><table><thead><tr><th>範例</th><th>結果</th></tr></thead><tbody><tr><td><code>int age = 20;</code><br><code>boolean adult = age &gt; 18;</code><br><code>System.out.println(&quot;是否成年 = &quot; + adult);</code></td><td>true</td></tr></tbody></table><h2 id="條件運算-conditional-operators" tabindex="-1">條件運算 (Conditional Operators) <a class="header-anchor" href="#條件運算-conditional-operators" aria-hidden="true">#</a></h2><ul><li><code>Java</code> 提供了以下的條件運算，兩邊運算元必須都是 <code>boolean</code> 型態，其回傳值也為 <code>boolean</code></li></ul><table><thead><tr><th>運算元</th><th>說明</th><th>範例</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>取 <code>交集(and)</code>，左右兩邊運算元都為 true 才回傳 true，如果左邊運算元為 false，則右邊運算元不計算，「 速度較快 」</td><td><code>age &gt; 18 &amp;&amp; age &lt; 30</code></td></tr><tr><td><code>||</code></td><td>取 <code>聯集(or)</code>，一邊回傳 true，即為 true。如果左邊運算元為 true，則右邊運算元不計算，「 速度較快 」</td><td><code>age &lt; 18 &amp;&amp; age &gt; 30</code></td></tr><tr><td><code>!</code></td><td>相反的布林值</td><td><code>!(age &gt; 18)</code></td></tr><tr><td><code>&amp;</code></td><td>取 <code>交集(and)</code>，左右兩邊都為 true 才回傳 true，兩邊都會運算</td><td><code>age &gt; 18 &amp; age &lt; 30</code></td></tr><tr><td><code>|</code></td><td>取 <code>聯集(or)</code>，任一邊回傳 true，即為 true，兩邊都會運算</td><td><code>age &gt; 18 | age &lt; 30</code></td></tr><tr><td><code>^</code></td><td>兩運算元一邊為 true，一邊為 false，才回傳 true</td><td><code>age &gt; 18 ^ age &lt; 30</code></td></tr></tbody></table><h2 id="真假值" tabindex="-1">真假值 <a class="header-anchor" href="#真假值" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;"><code>A</code></th><th style="text-align:center;"><code>B</code></th><th style="text-align:center;"><code>A &amp;&amp; B</code></th><th style="text-align:center;"><code>A || B</code></th></tr></thead><tbody><tr><td style="text-align:center;">真</td><td style="text-align:center;">真</td><td style="text-align:center;">真</td><td style="text-align:center;">真</td></tr><tr><td style="text-align:center;">真</td><td style="text-align:center;">F</td><td style="text-align:center;">F</td><td style="text-align:center;">真</td></tr><tr><td style="text-align:center;">F</td><td style="text-align:center;">真</td><td style="text-align:center;">F</td><td style="text-align:center;">真</td></tr><tr><td style="text-align:center;">f</td><td style="text-align:center;">F</td><td style="text-align:center;">假</td><td style="text-align:center;">F</td></tr></tbody></table><h2 id="位元運算子-bitwise-operators" tabindex="-1">位元運算子 (Bitwise Operators) <a class="header-anchor" href="#位元運算子-bitwise-operators" aria-hidden="true">#</a></h2><ul><li><code>&amp;</code> 兩 bit 都是 1，結果才為 1，否則為 0 <ul><li><code>1100 &amp; 0110 =&gt; 0100</code></li></ul></li><li><code>|</code> 只要有一邊是 1，結果就是 1，否則為 0 <ul><li><code>1100 | 0110 =&gt; 1110</code></li></ul></li><li><code>^</code> 一邊 0 一邊 1 才為 1，否則為 0 <ul><li><code>1100 ^ 0110 =&gt; 1010</code></li></ul></li><li><code>~</code> 01互換 <ul><li><code>~0110 =&gt; 1001</code></li></ul></li></ul><h2 id="遞增、遞減運算" tabindex="-1">遞增、遞減運算 <a class="header-anchor" href="#遞增、遞減運算" aria-hidden="true">#</a></h2><table><thead><tr><th>遞增、遞減運算</th><th>說明</th></tr></thead><tbody><tr><td><code>a++</code></td><td>『 <code>後置型</code> 』+1，為先取 a 值，『 <code>結束後</code> 』才 a + 1</td></tr><tr><td><code>a--</code></td><td>後置型 -1，為先取 a 值，結束後 才 a - 1</td></tr><tr><td><code>++a</code></td><td>『 <code>前置型</code> 』+1，『 <code>先執行</code> 』a = a +1，再取得 a 值</td></tr><tr><td><code>--a</code></td><td>前置型 -1，先執行 a = a -1，再取得 a 值</td></tr></tbody></table><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">++);</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(++</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 如果只有 ++a 則跟 a++ 無異</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">++)+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 10:11</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="指定運算-assignment-operators" tabindex="-1">指定運算 (Assignment Operators) <a class="header-anchor" href="#指定運算-assignment-operators" aria-hidden="true">#</a></h2><ul><li>指定運算為，將右邊運算完成的結果 <code>指定給左邊變數</code>。</li><li>等號左邊一定是 <code>變數</code>。</li><li>運算的結果會轉換為左邊變數的型態，所以左邊變數能儲存的值，一定要比右邊運算結果來得高。 <ul><li>例如：右邊運算為 <code>float</code>，則等於左邊至少要是 <code>float</code> 或者 <code>double</code>。</li></ul></li></ul><table><thead><tr><th>運算</th><th>例子</th><th>結果</th></tr></thead><tbody><tr><td><code>=</code></td><td><code>a = 10</code></td><td></td></tr><tr><td><code>+=</code></td><td><code>a += b</code></td><td><code>a = a + b</code></td></tr><tr><td><code>-=</code></td><td><code>a -= b</code></td><td><code>a = a - b</code></td></tr><tr><td><code>*=</code></td><td><code>a *= b</code></td><td><code>a = a * b</code></td></tr><tr><td><code>/=</code></td><td><code>a /= b</code></td><td><code>a = a / b</code></td></tr><tr><td><code>%=</code></td><td><code>a %= b</code></td><td><code>a = a % b</code></td></tr></tbody></table><h2 id="三元運算-conditional-operator" tabindex="-1">三元運算 <code>?:</code> (Conditional Operator) <a class="header-anchor" href="#三元運算-conditional-operator" aria-hidden="true">#</a></h2><ul><li>用法： <code>a ? b : c</code><ul><li>如果 <code>a</code> 運算執行結果為 <code>true</code>，則執行運算 <code>b</code>，否則執行運算 <code>c</code></li></ul></li><li>範例：<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> sales </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果銷售大於 1000，則薪水加 10，否則薪水 -10</span></span>
<span class="line"><span style="color:#A6ACCD;">salary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sales </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;"> salary </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> salary </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">薪水 = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> salary</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>範例：<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">成年</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">未成年</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="運算優先順序-operator-precedence" tabindex="-1">運算優先順序 (Operator Precedence) <a class="header-anchor" href="#運算優先順序-operator-precedence" aria-hidden="true">#</a></h2><p>當一個運算元左右都有運算符號時，會依以下的順序為優先</p><table><thead><tr><th>順序</th><th>符號</th><th>Associativity</th></tr></thead><tbody><tr><td>1</td><td><code>expr++</code> <code>expr--</code></td><td>先右再左</td></tr><tr><td>2</td><td><code>++expr</code> <code>--expr</code><br><code>+expr</code> <code>-expr</code> <code>~</code> <code>!</code></td><td>先左再右</td></tr><tr><td>3</td><td><code>*</code> <code>/</code> <code>%</code></td><td>先左再右</td></tr><tr><td>4</td><td><code>+</code> <code>-</code></td><td>先左再右</td></tr><tr><td>5</td><td><code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>&gt;&gt;&gt;</code></td><td>先左再右</td></tr><tr><td>6</td><td><code>&lt;</code> <code>&gt;</code> <code>&lt;=</code> <code>&gt;=</code> <code>instanceof</code></td><td>先左再右</td></tr><tr><td>7</td><td><code>==</code> <code>!=</code></td><td>先左再右</td></tr><tr><td>8</td><td><code>&amp;</code></td><td>先左再右</td></tr><tr><td>9</td><td><code>^</code></td><td>先左再右</td></tr><tr><td>10</td><td><code>|</code></td><td>先左再右</td></tr><tr><td>11</td><td><code>&amp;&amp;</code></td><td>先左再右</td></tr><tr><td>12</td><td><code>||</code></td><td>先左再右</td></tr><tr><td>13</td><td><code>? :</code></td><td>先左再右</td></tr><tr><td>14</td><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>&amp;=</code><br><code>^=</code> <code>|=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&gt;&gt;&gt;=</code></td><td>先左再右</td></tr></tbody></table><p><code>先乘除後加減</code>，優先順序可以利用 <code>中括號()</code> 加以修正。</p><ul><li><h3 id="優先級-precedence" tabindex="-1">優先級 Precedence <a class="header-anchor" href="#優先級-precedence" aria-hidden="true">#</a></h3><p><code>1 + 2 * 3</code><br> 同時間有兩個運算子，乘除運算子較加減為優先<br> 等同於 <code>1 + (2 * 3)</code></p><hr><p><code>int x = 6</code>;<br><code>int y = 10;</code><br><code>int z = ++x * y--;</code><br> 結果：<code>z = 70, x = 7, y = 9</code></p></li><li><h3 id="結合性-associativity" tabindex="-1">結合性 Associativity <a class="header-anchor" href="#結合性-associativity" aria-hidden="true">#</a></h3><p>當計算中有兩個相同位階的運算子，則計算順序以 <code>Associativity</code> 為主<br><code>72 / 2 / 3</code><br><code>2</code> 同時間左右兩個運算子，都是除，則 <code>先左再右</code> <br><code>(72 / 2) / 3</code></p></li></ul>`,75),s=[o];function n(r,i,c,p,h,y){return d(),e("div",null,s)}const u=t(l,[["render",n]]);export{b as __pageData,u as default};
