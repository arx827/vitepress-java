import{_ as e,c as o,o as l,a as n}from"./app.b24c6e2d.js";const F=JSON.parse('{"title":"6. Spring MVC 常用方法","description":"","frontmatter":{"title":"6. Spring MVC 常用方法"},"headers":[{"level":2,"title":"Spring MVC 常用註釋 (Annotation)","slug":"spring-mvc-常用註釋-annotation","link":"#spring-mvc-常用註釋-annotation","children":[{"level":3,"title":"Spring Boot 還提供了更簡潔的 編寫 URL 對應的方法：","slug":"spring-boot-還提供了更簡潔的-編寫-url-對應的方法","link":"#spring-boot-還提供了更簡潔的-編寫-url-對應的方法","children":[]}]},{"level":2,"title":"Spring MVC 其他請求設定","slug":"spring-mvc-其他請求設定","link":"#spring-mvc-其他請求設定","children":[]},{"level":2,"title":"Spring MVC 中 HTTP 常用功能","slug":"spring-mvc-中-http-常用功能","link":"#spring-mvc-中-http-常用功能","children":[]}],"relativePath":"guide/sb_iSpan/chapter_6.md"}'),a={name:"guide/sb_iSpan/chapter_6.md"},s=n(`<h1 id="_6-spring-mvc-常用方法" tabindex="-1">6. Spring MVC 常用方法 <a class="header-anchor" href="#_6-spring-mvc-常用方法" aria-hidden="true">#</a></h1><h2 id="spring-mvc-常用註釋-annotation" tabindex="-1">Spring MVC 常用註釋 (Annotation) <a class="header-anchor" href="#spring-mvc-常用註釋-annotation" aria-hidden="true">#</a></h2><ul><li><code>@Controller</code>： <ul><li>控制器，編寫在類別上，表示是 <code>SpringMVC</code> 的 <code>Controller</code>，負責處理由 <code>DispatcherServlet</code> 接收並分發過來的請求。</li></ul></li><li><code>@RequestMapping</code>： <ul><li>寫在 <code>Controller</code> 內的方法，真正處理請求位址對應的註釋。若編寫在類別上，則該類別所有回應請求的方法都以該位址為父路徑。</li></ul></li><li><code>@PathVariable</code>： <ul><li>將請求 <code>URL</code> 中的變數對應到功能處理方法的參數上，就是取得 <code>URL</code> 中的變數作為程式的參數。</li></ul></li><li><code>@RestController</code>： <ul><li>用來標記 <code>RESTful</code> 風格的控制器類別，等於 <code>@Controller</code> 加上 <code>@ResponseBody</code>，會直接回傳字串，常用於回應 <code>JSON</code> 格式的字串。</li></ul></li></ul><h3 id="spring-boot-還提供了更簡潔的-編寫-url-對應的方法" tabindex="-1"><code>Spring Boot</code> 還提供了更簡潔的 編寫 <code>URL</code> 對應的方法： <a class="header-anchor" href="#spring-boot-還提供了更簡潔的-編寫-url-對應的方法" aria-hidden="true">#</a></h3><ul><li><code>@GetMapping(&quot;/&quot;)</code>： <ul><li>相當等於 <code>@RequestMapping(value=&quot;/&quot;, method = RequestMethod.GET)</code></li></ul></li><li>上述方法也可以使用在以下註釋： <ul><li><code>@PostMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PutMapping</code></li></ul></li></ul><h2 id="spring-mvc-其他請求設定" tabindex="-1">Spring MVC 其他請求設定 <a class="header-anchor" href="#spring-mvc-其他請求設定" aria-hidden="true">#</a></h2><ul><li><p>正常的瀏覽器的 <code>FORM</code> 表單，只能提出 <code>GET</code> 與 <code>POST</code> 請求，並不能提出 <code>PUT</code> 與 <code>DELETE</code> 等方法， <code>spring 3.0</code> 新增一個過濾器，可以將 <code>POST</code> 請求轉換為 <code>PUT</code> 與 <code>DELETE</code> 方法。</p></li><li><p><code>org.springframework.web.filter.HiddenHttpMethodFilter</code></p><ul><li><code>HiddenHttpMethodFilter</code> 過濾器，會監看前端程式送來的請求參數中，是否含有名為 <code>_method</code> 的欄位，若有，則將請求之 <code>HTTP 方法</code> 依照此欄位的內容值來修改： <ul><li>若為 <code>PUT</code> (不分大小寫)，則將 <code>HTTP 方法</code> 改為 <code>PUT</code>。</li><li>若為 <code>DELETE</code> (不分大小寫)，則將 <code>HTTP 方法</code> 改為 <code>DELETE</code>。</li><li>提出此請求時，原始的 <code>HTTP 方法</code>，必須為 <code>POST</code>。</li></ul></li></ul></li><li><p>在 <code>Spring Boot 2.2</code> 版以前不需要做任何設定，因為它會自動配置 <code>HiddenHttpMethodFilter</code>，但自 <code>Spring Boot 2.2</code> 版(含)開始，它不再自動為應用系統配置此過濾器，我們必須自行配置。</p><ul><li>有兩種方法： <ul><li>方法一：在 <code>application.properties</code> 內加入下列設定： <ul><li><code>spring.mvc.hiddenmethod.filter.enabled=true</code></li></ul></li><li>方法二：以程式加入此過濾器 (非 Boot 專案時使用) <ul><li><code>Spring Boot</code> 提供一個 <code>FilterRegistrationBean</code>，讓應用系統加入所需的過濾器：<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span></span>
<span class="line"><span style="color:#C792EA;">FilterRegistrationBean</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Filter</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hiddenHttpMethodFilter</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">FilterRegistrationBean</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Filter</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> filterBean </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">FilterRegistrationBean</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">  filterBean</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFilter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HiddenHttpMethodFilter</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> filterBean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>我們只需要在任何以 <code>@Configuration</code> 修飾的 <code>Java</code> 類別中加入上面的方法即可。</li></ul></li></ul></li></ul></li></ul><h2 id="spring-mvc-中-http-常用功能" tabindex="-1">Spring MVC 中 HTTP 常用功能 <a class="header-anchor" href="#spring-mvc-中-http-常用功能" aria-hidden="true">#</a></h2><ul><li>處理訊息的類型 <code>Content Type</code><ul><li>在 <code>HTTP 協定</code> 的 <code>header</code> 中，<code>Content type</code> 表示實際請求中的媒體類型。PC端常用的是 <code>text/html</code> 格式，手機則是使用 <code>JSON 格式</code>。</li></ul></li><li>比較特別且常用的格式如下： <ul><li><code>application/json</code>：JSON 資料格式</li><li><code>application/pdf</code>：PDF 資料格式</li><li><code>multipart/form-data</code>：若在表單(form)中上傳資料，需使用此格式。</li></ul></li></ul>`,9),i=[s];function c(t,d,p,r,u,h){return l(),o("div",null,i)}const D=e(a,[["render",c]]);export{F as __pageData,D as default};
