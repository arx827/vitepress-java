import{_ as a,c as l,o as e,a as s}from"./app.b24c6e2d.js";const m=JSON.parse('{"title":"1. Java 簡介","description":"","frontmatter":{"title":"1. Java 簡介"},"headers":[{"level":2,"title":"Java語言的特性","slug":"java語言的特性","link":"#java語言的特性","children":[]},{"level":2,"title":"Java技術種類","slug":"java技術種類","link":"#java技術種類","children":[]},{"level":2,"title":"Compile 編譯","slug":"compile-編譯","link":"#compile-編譯","children":[]},{"level":2,"title":"執行Java","slug":"執行java","link":"#執行java","children":[]},{"level":2,"title":"JRE ( Java Runtime Environment )","slug":"jre-java-runtime-environment","link":"#jre-java-runtime-environment","children":[]},{"level":2,"title":"標準的類別函式庫 (Java SE API)","slug":"標準的類別函式庫-java-se-api","link":"#標準的類別函式庫-java-se-api","children":[]},{"level":2,"title":"程式基本架構","slug":"程式基本架構","link":"#程式基本架構","children":[]},{"level":2,"title":"註解","slug":"註解","link":"#註解","children":[]},{"level":2,"title":"程式執行","slug":"程式執行","link":"#程式執行","children":[]}],"relativePath":"guide/edu/chapter_1.md"}'),n={name:"guide/edu/chapter_1.md"},i=s(`<h1 id="_1-java-簡介" tabindex="-1">1. Java 簡介 <a class="header-anchor" href="#_1-java-簡介" aria-hidden="true">#</a></h1><h2 id="java語言的特性" tabindex="-1">Java語言的特性 <a class="header-anchor" href="#java語言的特性" aria-hidden="true">#</a></h2><ul><li><h3 id="簡單" tabindex="-1">簡單 <a class="header-anchor" href="#簡單" aria-hidden="true">#</a></h3><ul><li>Java 是 <code>C like</code> 語言，表示很多語法是繼承C的精神，但是 Java 不採用C的指標來操控記憶體位置。</li><li>C 語言中記憶體的使用宣告及釋放必須完全由程式控制，Java 則採用了「 Garbage Collection 」來回收不需使用的記憶體。</li></ul></li><li><h3 id="物件導向" tabindex="-1">物件導向 <a class="header-anchor" href="#物件導向" aria-hidden="true">#</a></h3><p>『 <strong>繼承</strong> 』、『 <strong>封裝</strong> 』、『 <strong>多型</strong> 』</p></li><li><h3 id="跨平台性" tabindex="-1">跨平台性 <a class="header-anchor" href="#跨平台性" aria-hidden="true">#</a></h3><p>Java 可以在不同的作業系統上執行，而且『 無需重新編譯 』。</p></li></ul><h2 id="java技術種類" tabindex="-1">Java技術種類 <a class="header-anchor" href="#java技術種類" aria-hidden="true">#</a></h2><ul><li><h3 id="java-se" tabindex="-1">Java SE <a class="header-anchor" href="#java-se" aria-hidden="true">#</a></h3> Java Standard Edition <strong>標準版</strong> 通常用來開發桌上型視窗程式或者簡易的指令程式。</li><li><h3 id="java-ee" tabindex="-1">Java EE <a class="header-anchor" href="#java-ee" aria-hidden="true">#</a></h3> Java Enterprise Edition <strong>企業版</strong> 主要用來開發網站伺服器端程式。</li><li><h3 id="java-me" tabindex="-1">Java ME <a class="header-anchor" href="#java-me" aria-hidden="true">#</a></h3> Java Micro Edition <strong>開發手持設備</strong> 在實用性上無法跟 Android 比。</li></ul><h2 id="compile-編譯" tabindex="-1">Compile 編譯 <a class="header-anchor" href="#compile-編譯" aria-hidden="true">#</a></h2><ul><li>利用 <code>%JAVA_HOME%/bin/jabac.exe</code> 進行編譯</li><li>步驟 <ul><li>開啟 <code>cmd.exe</code></li><li>進入 <code>HelloWorld.java</code> 的目錄，例如 <code>cd C:\\Java</code></li><li>語法： <code>Javac source_file</code></li><li>範例： <code>Javac HelloWorld.java</code></li></ul></li><li>編譯完會產生 <code>HelloWorld.class</code><ul><li>C 語言編譯完直接產生 <code>machine code</code> ，可以直接在作業系統上執行，但不同作業系統則需 『 重新編譯 』。</li><li><code>Java</code> 編譯產生副檔名為 <code>class</code> 的檔案，並不能直接在作業系統上執行，class檔中含有俗稱的 <code>bytecodes</code>，為一種可以在 <code>JVM</code> 特殊環境中被執行的碼， <code>Oracle</code> 針對不同作業系統有提供相對應的JVM環境可以執行 class。</li></ul></li><li>可以指定產生 <code>class</code> 的目錄 <ul><li>例如：<code>javac -d C:\\compile HelloWorld.java</code> ，表示產生的 class 會在 <code>C:\\compile\\HelloWorld.class</code>。</li></ul></li></ul><h2 id="執行java" tabindex="-1">執行Java <a class="header-anchor" href="#執行java" aria-hidden="true">#</a></h2><ul><li><p>執行Java指令：<code>java {main方法的類別名稱}</code></p><ul><li><p>範例：java HelloWorld <s>.java</s> [註]沒有.java，執行時是類別名稱。</p><p>如果 <code>HelloWorld.class</code> 在目前的cmd的當前目錄下，可以不用加任何參數。</p></li></ul></li><li><p>如果 <code>HelloWorld.class</code> 並不在目前的cmd的當前目錄下，可以利用 <code>-cp</code> 指定class位置，例如：class 位置在 C:\\java\\HelloWorld.class</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">java </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cp c</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">\\</span><span style="color:#C792EA;">Java</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">World</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>-cp：為 <code>-classpath</code> 的縮寫，表示 class 的路徑 ( path )，也就是指定class檔案的目錄，如果有多個class且散在不同目錄下，可以用 <code>;</code> 區隔 ( linux上為<code>:</code>)，如果省略則預設為當前 cmd 中的目錄。</p></li><li><p><code>HelloWorld</code> 為 class的名稱，『 無需加上<code>.class</code>，或者<code>.java</code> 』</p></li></ul></li></ul><h2 id="jre-java-runtime-environment" tabindex="-1">JRE ( Java Runtime Environment ) <a class="header-anchor" href="#jre-java-runtime-environment" aria-hidden="true">#</a></h2><p><strong>JDK 一定會包含一個 JRE</strong></p><ul><li><code>JRE</code> 包含一個 Java 虛擬機器 <code>JVM</code> ( Java Virtual Machine )，以及標準的類別函式庫 ( Java SE API，ex: System.out.printIn )。</li><li>不同的作業系統中執行必須安裝相對應的 <code>JVM</code> 版本，class檔案則可以在 <code>JVM</code> 中執行。以達到 <code>Write once run anywhere</code></li></ul><h2 id="標準的類別函式庫-java-se-api" tabindex="-1">標準的類別函式庫 (Java SE API) <a class="header-anchor" href="#標準的類別函式庫-java-se-api" aria-hidden="true">#</a></h2><ul><li>標準函式庫由 <code>Oracle</code> 工程師開發，提供程式語言基本的型別及類別，讓開發人員可以馬上利用，加速程式開發。</li><li>通常在描述函式庫，有一些別名，意思都是相近 <ul><li>API ( Application Programming Interface )</li><li>Library</li><li>Framework</li><li>SDK</li></ul></li></ul><h2 id="程式基本架構" tabindex="-1">程式基本架構 <a class="header-anchor" href="#程式基本架構" aria-hidden="true">#</a></h2><p>每個類別中，可以定義自己的屬性及方法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWorld</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>public</strong>：modifier：公開給其他類存取</li><li><strong>HelloWorld</strong>：類別名稱</li><li><strong>void</strong>：無回傳值</li><li><strong>main</strong>：方法名稱</li><li><strong>args</strong>：方法參數</li></ul><h2 id="註解" tabindex="-1">註解 <a class="header-anchor" href="#註解" aria-hidden="true">#</a></h2><ul><li>程式中可以利用以下方式做註解，註解通常用來說明程式，註解部分不會被編譯、不為程式邏輯的一部分。<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 雙斜線，單行註解</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  斜線星號開頭，星號斜線結尾 為 多行註解</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="程式執行" tabindex="-1">程式執行 <a class="header-anchor" href="#程式執行" aria-hidden="true">#</a></h2><ul><li><code>JVM</code> 啟動執行時，會執行命令列中的 <code>class</code> ( HelloWorld.class )，並尋找 class 中的 <code>public static void main</code> 方法，執行方法中的程式。</li><li>main 方法包含兩個重要的 <code>modifier</code> ( 修飾詞 ) public static，缺一不可。</li><li>main 方法無回傳值，<code>void</code> 表示無回傳值。</li><li>每一隻Java程式 (.java) <ul><li><strong>類別名稱必須跟檔名一致</strong></li><li><strong>不一定會有 main 方法</strong></li><li>多個Java程式可以組合成一個應用程式，執行時會只有於指令列中指定的類別 ( java HelloWorld ) 中的 <code>main()</code> 會被執行，作為整個應用程式的起點。</li></ul></li></ul>`,22),o=[i];function c(r,d,t,p,h,u){return e(),l("div",null,o)}const C=a(n,[["render",c]]);export{m as __pageData,C as default};
