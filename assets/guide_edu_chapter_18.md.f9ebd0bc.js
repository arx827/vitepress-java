import{_ as s,c as a,o as n,a as l}from"./app.b24c6e2d.js";const u=JSON.parse('{"title":"18. 介面","description":"","frontmatter":{"title":"18. 介面"},"headers":[{"level":2,"title":"多重繼承？","slug":"多重繼承","link":"#多重繼承","children":[]},{"level":2,"title":"介面 Interface","slug":"介面-interface","link":"#介面-interface","children":[]},{"level":2,"title":"實作介面","slug":"實作介面","link":"#實作介面","children":[]},{"level":2,"title":"實作介面範例","slug":"實作介面範例","link":"#實作介面範例","children":[]},{"level":2,"title":"Lab","slug":"lab","link":"#lab","children":[]},{"level":2,"title":"介面","slug":"介面","link":"#介面","children":[]},{"level":2,"title":"介面繼承","slug":"介面繼承","link":"#介面繼承","children":[]},{"level":2,"title":"介面常數","slug":"介面常數","link":"#介面常數","children":[]},{"level":2,"title":"default & static JDK 8","slug":"default-static-jdk-8","link":"#default-static-jdk-8","children":[]}],"relativePath":"guide/edu/chapter_18.md"}'),e={name:"guide/edu/chapter_18.md"},p=l(`<h1 id="_18-介面" tabindex="-1">18. 介面 <a class="header-anchor" href="#_18-介面" aria-hidden="true">#</a></h1><h2 id="多重繼承" tabindex="-1">多重繼承？ <a class="header-anchor" href="#多重繼承" aria-hidden="true">#</a></h2><ul><li>例如：人是一種動物，所以人繼承動物。</li><li>但是人有很多職業，律師、會計師、工程師。甚至有可能多重身份，同時為律師及會計師，怎麼表達？Java只支援『 單一繼承 』，無法同時繼承二種類別，那要如何模擬各種不同的身份？</li><li>Java 利用介面來達到多重繼承的概念，稱為『 <code>實作</code> 』(implement) 多個介面。</li></ul><h2 id="介面-interface" tabindex="-1">介面 Interface <a class="header-anchor" href="#介面-interface" aria-hidden="true">#</a></h2><ul><li><p>在介面中，只定義方法(規格)。</p></li><li><p>介面在結構上跟 <code>abstract class</code> 很像，主要拿來開立規格，然而介面沒有 <code>instance variable (實體變數)</code>，幾乎都是抽象方法，Java 8 之前在介面中的方法甚至是沒有實作的，都是抽象的方法。</p></li><li><p>介面定義語法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">介面名稱</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">方法</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 注意：方法不用實作，且 public 也可省略</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lawyer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">訴訟</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>介面中的『 抽象方法 』預設都是 <code>public</code>，『 <code>public</code> 』在介面宣告中可以省略，然而實作類別中，不能省略 <code>public</code>。</p></li><li><p>介面中的方法，除了 <code>default</code>(JDK8 新功能)，皆為抽象，子類別必須實作。</p></li></ul><h2 id="實作介面" tabindex="-1">實作介面 <a class="header-anchor" href="#實作介面" aria-hidden="true">#</a></h2><ul><li><p>語法</p><ul><li><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">類別名稱</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> 介面 [</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">介面1] [</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">介面2]    </span><span style="color:#676E95;font-style:italic;">// 實作多個介面時，用逗號(,)隔開</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><code>implements</code> 用在介面，稱為實作。</li><li>範例：<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Superman</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lawyer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">訴訟</span><span style="color:#89DDFF;">(){...}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 此處 public 不能省略</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>繼承中，我們是用『 是一種 』來描述兩者關係，在介面除了『 是一種 』關係外，還多了『 具備 』什麼『 特性 』『 擁有 』什麼『 能力 』(介面上定義的方法)，來描述兩者關係。</li></ul></li><li><p>目的</p><ul><li>賦予物件『 多個 』特性(身份、規格)：無法透過繼承的方式，賦予在物件上的特性，可以透過介面獲得解決。</li><li>介面被大量的應用在多型上，<code>利用介面操作相同特性的物件</code> 取代 <code>父類別型態操作子類別物件</code>。</li></ul></li></ul><h2 id="實作介面範例" tabindex="-1">實作介面範例 <a class="header-anchor" href="#實作介面範例" aria-hidden="true">#</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interFace</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lawyer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">訴訟</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interFace</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Accountant</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">報稅</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interFace</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Superman</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Lawyer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Accountant</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">訴訟</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">報稅</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="lab" tabindex="-1">Lab <a class="header-anchor" href="#lab" aria-hidden="true">#</a></h2><ul><li>產生 <code>Warrantable</code> 介面，定義 <code>int</code> 保固天數();</li><li><code>Notebook</code> 繼承 <code>Product</code> 實作 <code>Warrantable</code> 介面。</li><li>產生 <code>Expirable</code> 介面，定義 <code>Date</code> 最後使用期限()，<code>import java.util.Date</code>。</li><li>產生 <code>Food</code> 類別繼承 <code>Product</code>，實作 <code>Expirable</code> 介面。</li><li>產生 <code>SimCard</code> 類別，實作 <code>Warrantable</code>、<code>Expirable</code> 介面。</li></ul><blockquote><p>[註] 雖然 <code>Java</code> 可以使用中文方法，但不建議，這裡只是為了讓大家容易熟悉介面。</p></blockquote><h2 id="介面" tabindex="-1">介面 <a class="header-anchor" href="#介面" aria-hidden="true">#</a></h2><ul><li>簡單來說，介面跟抽象類別很像，有以下區別。 <ul><li>介面中所有的方法都是 <code>abstract</code>，抽象類別則可以有實作方法。</li><li>另外介面不需要有建議方法，只有功能上、規格上的宣告。</li><li>介面上定義的常數都為 <code>static final</code>。</li></ul></li><li>空介面 <ul><li>沒有定義任何方法的介面叫 <code>空介面</code>，只是拿來標註該類別可以有某些特性。</li><li><code>java.lang.Cloneable</code> 以及 <code>java.lang.Serializable</code> 是兩個空介面，完全沒有定義任何方法。<code>Cloneable</code> 表示該物件可以被複製，<code>Serializable</code> 表示可以被序列化，將物件儲存起來。</li></ul></li></ul><h2 id="介面繼承" tabindex="-1">介面繼承 <a class="header-anchor" href="#介面繼承" aria-hidden="true">#</a></h2><ul><li><p><code>extends</code> 進行介面繼承</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">介面3</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> 介面1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 介面2 </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>實作的類別，必須將 <code>介面1</code>、<code>介面2</code>、<code>介面3</code> 中的方法都實作出來。</p></li></ul><h2 id="介面常數" tabindex="-1">介面常數 <a class="header-anchor" href="#介面常數" aria-hidden="true">#</a></h2><ul><li><p>介面主要在定義方法(特性)，也可以把常用的常數或者文字型態的 <code>key</code> 值定義在介面上。</p></li><li><p>變數名稱皆為大寫，利用 <code>_(底線)</code> 區隔不同字。</p></li><li><p>介面不是類別，不能 <code>new</code>，所以定義在介面上的變數，必須是 <code>static</code>。</p></li><li><p>介面主要在定義規格(特性)，因此變數不能重新指定值，必須是 <code>final</code>。</p></li><li><p><code>public static final</code> 可以省略</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Warrantable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> MAX_WARRANTY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">360</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可簡化為</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Warrantable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> MAX_WARRANTY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">360</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="default-static-jdk-8" tabindex="-1">default &amp; static JDK 8 <a class="header-anchor" href="#default-static-jdk-8" aria-hidden="true">#</a></h2><ul><li>JDK 8 後，介面支援實作方法，利用 <code>default</code> 或者 <code>static</code> 關鍵字 <ul><li><code>default</code>、<code>static</code> 方法替介面提供了預設可能性，功能上幾乎類似 <code>abstract class</code>。讓『 多重實作 』幾乎等於『 多重繼承 』，唯一的差異在於繼承可以繼承父類別的實體變數，但實作介面仍然只有方法。</li><li><code>default</code> 方法，可以於實作時被覆蓋 (override)。</li><li><code>static</code> 方法，於實作類別中，不能被覆寫。</li><li><code>default</code>、<code>static</code> 二者不能同時使用。 範例：<div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Expirable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">default</span><span style="color:#A6ACCD;"> Date </span><span style="color:#82AAFF;">最後使用期限</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Product</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2018</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">31</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul></li></ul>`,22),o=[p];function c(r,t,i,d,C,y){return n(),a("div",null,o)}const D=s(e,[["render",c]]);export{u as __pageData,D as default};
