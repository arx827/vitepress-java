import{_ as e,c,o,a as d}from"./app.b24c6e2d.js";const v=JSON.parse('{"title":"5. Spring MVC 實作及常用方法","description":"","frontmatter":{"title":"5. Spring MVC 實作及常用方法"},"headers":[{"level":2,"title":"Spring MVC 架構","slug":"spring-mvc-架構","link":"#spring-mvc-架構","children":[]},{"level":2,"title":"Spring MVC 主要流程","slug":"spring-mvc-主要流程","link":"#spring-mvc-主要流程","children":[]},{"level":2,"title":"Spring MVC 與 三層式架構","slug":"spring-mvc-與-三層式架構","link":"#spring-mvc-與-三層式架構","children":[]}],"relativePath":"guide/sb_iSpan/chapter_5.md"}'),i={name:"guide/sb_iSpan/chapter_5.md"},r=d('<h1 id="_5-spring-mvc-實作及常用方法" tabindex="-1">5. Spring MVC 實作及常用方法 <a class="header-anchor" href="#_5-spring-mvc-實作及常用方法" aria-hidden="true">#</a></h1><h2 id="spring-mvc-架構" tabindex="-1">Spring MVC 架構 <a class="header-anchor" href="#spring-mvc-架構" aria-hidden="true">#</a></h2><ul><li><code>Spring Boot</code> 開發 <code>Web</code> 應用程式主要使用 <code>MVC 模式</code>。<code>MVC</code> 是 <code>Model (模型)</code>、<code>View (視圖)</code>、<code>Controller (控制器)</code> 的縮寫。</li><li><code>Model</code>：<code>模型</code>，單純存取資料的物件或 <code>POJO</code> (<code>Plain Old Java Objects</code>，簡單的 Java 物件)</li><li><code>View</code>：<code>視圖</code>，主要用來解析、處理、顯示內容。</li><li><code>Controller</code>：<code>控制器</code>，用來處理視圖中的回應。它決定如何呼叫 <code>Model</code>、如何呼叫 <code>業務層 (Service)</code> 的資料增加、刪除、修改和查詢等業務操作，以及如何將結果傳回<code>視圖</code>。盡量不要在控制器中放入業務邏輯。 <blockquote><p><code>MVC</code> 只是一種常用的架構，可能會因為需求不同改用其他模式。</p></blockquote></li><li><code>Spring MVC</code> 主要透過 <code>DispatcherServlet</code> 物件封裝 <code>Servlet</code> 相關的功能，例如：http 請求 (<code>Controller</code>, <code>HandlerMapping</code>)，view 的處理 (<code>View Resolver</code>) 等功能。</li><li>再加上業務邏輯的 <code>Service</code>、掌控資料庫的 <code>DAO</code> (<code>Repository</code>)，一起交由 <code>spring</code> 控管，這種架構的專案就稱為 <code>Spring MVC</code> 架構。</li></ul><h2 id="spring-mvc-主要流程" tabindex="-1">Spring MVC 主要流程 <a class="header-anchor" href="#spring-mvc-主要流程" aria-hidden="true">#</a></h2><ul><li><code>Spring MVC</code> 主要的流程如下： <ul><li>使用者由瀏覽器發出請求，由 <code>Tomcat</code> 接收並轉交給 <code>DispatcherServlet</code> 處理。</li><li><code>DispatcherServlet</code> 比對控制器中設定的對應路徑，進行下一步處理。</li><li><code>ViewResolver</code> 將 <code>ModelAndView</code> 或 <code>Exception</code> 解析成 <code>View</code>，且根據 <code>ModelAndView</code> 中的資料渲染頁面。</li></ul></li></ul><h2 id="spring-mvc-與-三層式架構" tabindex="-1">Spring MVC 與 三層式架構 <a class="header-anchor" href="#spring-mvc-與-三層式架構" aria-hidden="true">#</a></h2><ul><li>三層式架構分為：<code>表現層 (UI)</code>、<code>業務邏輯層 (Service)</code>、<code>資料存取層 (DAO 或 Repository)</code>， 詳細分層說明如下： <ul><li><code>表現層</code>：<code>Controller</code> (和頁面)，管理請求的送出和接收</li><li><code>資料存取層</code>：與資料庫進行互動的持久層，在 <code>Spring Data JPA</code> 中，透過 <code>Hibernate</code> 來實作。</li><li><code>業務邏輯層</code>：是三層架構的服務層，負責處理業務邏輯，通常會呼叫 <code>DAO</code> 幫忙做事情。</li></ul></li></ul>',7),l=[r];function n(a,t,s,p,h,g){return o(),c("div",null,l)}const S=e(i,[["render",n]]);export{v as __pageData,S as default};
