import{_ as s,c as n,o as a,a as l}from"./app.b24c6e2d.js";const g=JSON.parse('{"title":"8. Spring Boot 使用 JSP 時需要的設定","description":"","frontmatter":{"title":"8. Spring Boot 使用 JSP 時需要的設定"},"headers":[{"level":2,"title":"Spring Boot 使用 JSP 時需要的設定","slug":"spring-boot-使用-jsp-時需要的設定","link":"#spring-boot-使用-jsp-時需要的設定","children":[]}],"relativePath":"guide/sb_iSpan/chapter_8.md"}'),p={name:"guide/sb_iSpan/chapter_8.md"},e=l(`<h1 id="_8-spring-boot-使用-jsp-時需要的設定" tabindex="-1">8. Spring Boot 使用 JSP 時需要的設定 <a class="header-anchor" href="#_8-spring-boot-使用-jsp-時需要的設定" aria-hidden="true">#</a></h1><h2 id="spring-boot-使用-jsp-時需要的設定" tabindex="-1">Spring Boot 使用 JSP 時需要的設定 <a class="header-anchor" href="#spring-boot-使用-jsp-時需要的設定" aria-hidden="true">#</a></h2><ul><li>因 <code>Spring Boot</code> 開始流行的年代 (約 2017 左右)，網路應用程式開發剛好流行「 <code>前後端分離</code> 」的模式，所以 <code>Spring</code> 本身不建議開發者使用 <code>JSP</code> 或模板引擎 (<code>Thymeleaf</code>、<code>FreeMaker</code>、...等)。</li><li>但後來技術者們發現，在有些沒有那麼大的專案其實沒有必要做前後端分離，有時候也不需要那麼專業的前端技術 (也可能為了省前端工程師的成本)，所以原本 <code>MVC 模式</code> 的開發還是很流行，只是有些功能會混合使用 <code>ajax</code> + <code>restful api</code>。</li><li>因上述歷史背景，<code>Spring Boot</code> 若要使用 <code>JSP</code>，則需要以下額外設定。</li></ul><p><code>application.properties</code> 中需要的設定：</p><ul><li><code>spring.mvc.view.prefix=/WEB-INF/jsp/</code><ul><li>它的路徑如下： <ul><li><code>\\src\\main\\webapp\\WEB-INF\\jsp</code></li></ul></li></ul></li><li><code>spring.mvc.view.suffix=.jsp</code></li></ul><p><code>pom.xml</code> 中需要增加兩個套件的標籤：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">javax.servlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">jstl</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.apache.tomcat.embed</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- 解析 jsp --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">tomcat-embed-jasper</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- provided =&gt; 交給 SpringBoot 自行尋找版本 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">provided</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,7),o=[e];function t(c,r,i,d,F,D){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{g as __pageData,u as default};
