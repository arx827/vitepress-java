import{_ as s,c as n,o as a,a as l}from"./app.b24c6e2d.js";const d=JSON.parse('{"title":"17. 多型","description":"","frontmatter":{"title":"17. 多型"},"headers":[{"level":2,"title":"多型 (Polymorphism)","slug":"多型-polymorphism","link":"#多型-polymorphism","children":[]},{"level":2,"title":"使用時機","slug":"使用時機","link":"#使用時機","children":[]},{"level":2,"title":"多型","slug":"多型","link":"#多型","children":[]},{"level":2,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]}],"relativePath":"guide/edu/chapter_17.md"}'),o={name:"guide/edu/chapter_17.md"},e=l(`<h1 id="_17-多型-polymorphism" tabindex="-1">17. 多型 (Polymorphism) <a class="header-anchor" href="#_17-多型-polymorphism" aria-hidden="true">#</a></h1><p><code>POLY</code>：多 <code>MORPHOLOGY</code>：型態</p><h2 id="多型-polymorphism" tabindex="-1">多型 (Polymorphism) <a class="header-anchor" href="#多型-polymorphism" aria-hidden="true">#</a></h2><ul><li>一個物件可以使用多種型態來表示或操作，稱之為多型。 <ul><li><code>Notebook</code>『 是一種 』<code>Product</code> 的型態 (因為繼承)。因此我們在操作物件時，除了利用本身型別 (<code>Notebook</code>) 外，也可以利用 <code>Product</code> 的型別來操作。</li><li>通常使用時機：用父類別的『 方法 』操作不同型態的子物件。</li></ul></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Notebook</span><span style="color:#A6ACCD;"> notebook </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Notebook</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Asus Notebook</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">365</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">Product</span><span style="color:#A6ACCD;"> item </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> notebook</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Notebook 是一種 Product，所以可以轉成 Product 型別</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> info </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">desc</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 用父類別的『 方法 』操作子類別物件</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>[注意]：雖然程式看起來是呼叫 <code>Product</code> 型別的 <code>description</code> 方法，但因為實際被操作的物件是 <code>Notebook</code>，真正被呼叫的方法是定義在 <code>Notebook</code> 中的 <code>desc()</code>，而不是 <code>Product</code> 中的 <code>desc()</code>。</li></ul><h2 id="使用時機" tabindex="-1">使用時機 <a class="header-anchor" href="#使用時機" aria-hidden="true">#</a></h2><ul><li>多型的使用時機 <ul><li>利用父類別型別來操作子類別的方法。</li><li>好處：即便再有新的子類別，程式碼也無需修改。</li></ul></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Product</span><span style="color:#A6ACCD;"> item1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Notebook</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Asus Notebook</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...);</span></span>
<span class="line"><span style="color:#C792EA;">Product</span><span style="color:#A6ACCD;"> item2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Food</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">肉鬆</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">Product</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> items </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Product</span><span style="color:#89DDFF;">[]{</span><span style="color:#A6ACCD;">item1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> item2</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Product</span><span style="color:#A6ACCD;"> eachItem</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> items</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">eachItem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">desc</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">Notebook</span><span style="color:#A6ACCD;"> item3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Notebook</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> item1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 強制轉型，保證一定是 Notebook，編譯器就不會報錯。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 然而轉型成子類別時，因為 Product 不一定是 Notebook，所以這裡必須使用『 強制轉型 』。</span></span>
<span class="line"><span style="color:#C792EA;">Food</span><span style="color:#A6ACCD;"> item4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Food</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> item1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 執行上則會發生錯誤。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="多型" tabindex="-1">多型 <a class="header-anchor" href="#多型" aria-hidden="true">#</a></h2><ul><li><code>多型</code> 是物件導向語言中，非常重要的一個特性，允許使用『 <code>共通</code> 』的父類別來定方法 (開規格)，而子類別可以自行決定實作內容。單一窗口，多重實作。</li><li>多型的特性，可以讓程式碼變得更簡潔 (因為使用父類別型態來表達，所以程式碼不需要強制轉換成子類別而變得簡潔)，重覆使用性提高 (因為繼承了父類別的方法，可以直接使用)。</li><li><code>Override (覆寫)</code> 是 Java 中實現多型的其中一種機制，另一種更重要的機制是 <code>介面</code>。</li></ul><h2 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h2><ul><li>利用 <code>instanceof</code> 來判斷該物件是否具備某種型態，如果實際物件為 <code>instanceof</code> 右方指定型態，則回傳 true。</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">item1 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> Notebook</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">item2 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> Food</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">item1 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> Food</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,15),p=[e];function t(c,r,i,D,y,F){return a(),n("div",null,p)}const C=s(o,[["render",t]]);export{d as __pageData,C as default};
